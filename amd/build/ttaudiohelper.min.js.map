{"version":3,"sources":["../src/ttaudiohelper.js"],"names":["define","$","log","wavencoder","debug","aR","encoder","microphone","isRecording","audioContext","processor","uniqueid","config","bufferLen","numChannels","mimeType","init","waveHeight","therecorder","prepare_html","window","AudioContext","webkitAudioContext","onStop","onStream","onError","canvas","canvasCtx","getContext","start","createJavaScriptNode","createScriptProcessor","connect","destination","navigator","mediaDevices","getUserMedia","audio","video","then","gotStreamMethod","catch","stop","clearInterval","interval","clearRect","width","update_audio","close","disconnect","tracks","forEach","track","finish","getBuffers","event","buffers","ch","inputBuffer","getChannelData","stream","getTracks","createMediaStreamSource","sampleRate","onaudioprocess","encode","listener","createAnalyser","fftSize","bufferLength","frequencyBinCount","analyserData","Uint8Array","setInterval","drawWave","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","slicewaveWidth","x","i","v","y","lineTo","stroke"],"mappings":"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","sourcesContent":["define(['jquery', 'core/log', 'mod_poodlltime/ttwavencoder'], function ($, log, wavencoder) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file is the engine that drives audio rec and canvas drawing. TT Recorder is the just the glory kid\n     */\n\n    log.debug('TT Audio Helper initialising');\n\n    var aR =  {\n        encoder: null,\n        microphone: null,\n        isRecording: false,\n        audioContext: null,\n        processor: null,\n        uniqueid: null,\n\n        config: {\n            bufferLen: 4096,\n            numChannels: 2,\n            mimeType: 'audio/wav'\n        },\n\n        init: function(waveHeight, uniqueid, therecorder) {\n\n            aR.waveHeight = waveHeight;\n            aR.uniqueid=uniqueid;\n            aR.therecorder= therecorder;\n            this.prepare_html();\n\n\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n        },\n\n        onStop: function() {},\n        onStream: function() {},\n        onError: function() {},\n\n\n        prepare_html: function(){\n            aR.canvas =$('#' + aR.uniqueid + \"_waveform\");\n            aR.canvasCtx = aR.canvas[0].getContext(\"2d\");\n        },\n\n        start: function() {\n            // Audio context\n            aR.audioContext = new AudioContext();\n            if (aR.audioContext.createJavaScriptNode) {\n                aR.processor = aR.audioContext.createJavaScriptNode(aR.config.bufferLen, aR.config.numChannels, aR.config.numChannels);\n            } else if (aR.audioContext.createScriptProcessor) {\n                aR.processor = aR.audioContext.createScriptProcessor(aR.config.bufferLen, aR.config.numChannels, aR.config.numChannels);\n            } else {\n                log.debug('WebAudio API has no support on this browser.');\n            }\n            aR.processor.connect(aR.audioContext.destination);\n\n            // Mic permission\n            navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: false\n            }).then(aR.gotStreamMethod).catch(aR.onError);\n        },\n\n        stop: function() {\n            clearInterval(aR.interval);\n            aR.canvasCtx.clearRect(0, 0, aR.canvas.width()*2, this.waveHeight * 2);\n            aR.isRecording = false;\n            aR.therecorder.update_audio('isRecording',false);\n            aR.audioContext.close();\n            aR.processor.disconnect();\n            aR.tracks.forEach(track => track.stop());\n            aR.onStop(aR.encoder.finish());\n\n        },\n\n        getBuffers: function(event) {\n            var buffers = [];\n            for (var ch = 0; ch < 2; ++ch)\n                buffers[ch] = event.inputBuffer.getChannelData(ch);\n            return buffers;\n        },\n\n        gotStreamMethod: function(stream) {\n            aR.onStream(stream);\n            aR.isRecording = true;\n            aR.therecorder.update_audio('isRecording',true);\n            aR.tracks = stream.getTracks();\n\n            // Create a MediaStreamAudioSourceNode for the microphone\n\n            aR.microphone = aR.audioContext.createMediaStreamSource(stream);\n\n            // Connect the AudioBufferSourceNode to the gainNode\n\n            aR.microphone.connect(aR.processor);\n            aR.encoder = wavencoder;\n            aR.encoder.init(aR.audioContext.sampleRate, 2);\n\n            // Give the node a function to process audio events\n            aR.processor.onaudioprocess = function(event) {\n                aR.encoder.encode(aR.getBuffers(event));\n            };\n\n            aR.listener = aR.audioContext.createAnalyser();\n            aR.microphone.connect(aR.listener);\n            aR.listener.fftSize = 2048; // 256\n\n            aR.bufferLength = aR.listener.frequencyBinCount;\n            aR.analyserData = new Uint8Array(aR.bufferLength);\n\n            aR.canvasCtx.clearRect(0, 0, aR.canvas.width()*2, aR.waveHeight*2);\n\n            aR.interval = setInterval(function() {\n                aR.drawWave();\n            }, 100);\n\n        },\n\n        drawWave: function() {\n\n            var width = aR.canvas.width() * 2;\n            aR.listener.getByteTimeDomainData(aR.analyserData);\n\n            aR.canvasCtx.fillStyle = 'white';\n            aR.canvasCtx.fillRect(0, 0, width, aR.waveHeight*2);\n\n            aR.canvasCtx.lineWidth = 5;\n            aR.canvasCtx.strokeStyle = 'gray';\n            aR.canvasCtx.beginPath();\n\n            var slicewaveWidth = width / aR.bufferLength;\n            var x = 0;\n\n            for (var i = 0; i < aR.bufferLength; i++) {\n\n                var v = aR.analyserData[i] / 128.0;\n                var y = v * aR.waveHeight;\n\n                if (i === 0) {\n                    // aR.canvasCtx.moveTo(x, y);\n                } else {\n                    aR.canvasCtx.lineTo(x, y);\n                }\n\n                x += slicewaveWidth;\n            }\n\n            aR.canvasCtx.lineTo(width, aR.waveHeight);\n            aR.canvasCtx.stroke();\n\n        }\n    }; //end of aR declaration\n    return aR;\n\n});"],"file":"ttaudiohelper.min.js"}